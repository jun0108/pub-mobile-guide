@use "sass:map";
@use "~/styles/helpers/mixins/index" as *;
/* ========================== Variables ========================== */
$button-style: (
  sm: (
    min-width: 100px,
    height: var(--form-height-sm),
    padding: 10px,
  ),
  md: (
    min-width: 120px,
    height: var(--form-height-md),
    padding: 20px,
  ),
  lg: (
    min-width: 120px,
    height: var(--form-height-lg),
    padding: 20px,
  ),
  xl: (
    min-width: 120px,
    height: var(--form-height-xl),
    padding: 20px,
  ),
);

$button-solid-colors: (
  primary: (
    text: var(--color-white),
    default: var(--color-primary-850),
    hover: var(--color-primary-800),
    disabled: var(--color-gray-150)
  ),
  secondary: (
    text: var(--color-gray-600),
    default: var(--color-gray-100),
    hover: var(--color-primary-150),
    disabled: var(--color-gray-10)
  ),
  negative: (
    text: var(--color-gray-500),
    default: var(--color-gray-100),
    hover: var(--color-primary-150),
    disabled: var(--color-gray-10)
  ),
  white: (
    text: var(--color-gray-500),
    default: var(--color-white),
    hover: var(--color-gray-50),
    disabled: var(--color-gray-100),
  ),
  gray: (
    text: var(--color-gray-500),
    default: var(--color-gray-50),
    hover: var(--color-gray-100),
    disabled: var(--color-gray-200),
  ),
);
$button-line-colors: (
  primary: (
    text: var(--color-primary-850),
    default: var(--color-primary-850),
    hover: var(--color-primary-800),
    disabled: var(--color-gray-150)
  ),
  secondary: (
    text: var(--color-gray-500),
    default: var(--color-gray-100),
    hover: var(--color-primary-150),
    disabled: var(--color-gray-10)
  ),
  negative: (
    text: var(--color-gray-600),
    default: var(--color-gray-400),
    hover: var(--color-primary-700),
    disabled: var(--color-gray-150)
  ),
  white: (
    text: var(--color-gray-500),
    default: var(--color-white),
    hover: var(--color-white),
    disabled: var(--color-white)
  ),
  gray: (
    text: var(--color-gray-500),
    default: var(--color-gray-50),
    hover: var(--color-gray-100),
    disabled: var(--color-gray-200),
  ),
);
/* ========================== Mixins ========================== */
@mixin btn-base($type: 'solid', $color: 'primary') {
  @apply flex justify-center items-center;
  @include btn-color($type: $type, $color: $color);
  width: max-content;
  border-radius: var(--radius-sm);
  cursor: pointer;
  white-space: nowrap;
  transition: var(--transition);
}

@mixin btn-color($type, $color) {
  $solid-color-map: map.get($button-solid-colors, $color);
  $line-color-map: map.get($button-line-colors, $color);

  @if $type == 'full' {
    @include typo(var(--font-size-14), 500, map.get($solid-color-map, text));
    background-color: map.get($solid-color-map, default);
    border: 1px solid map.get($solid-color-map, default);
    &:hover:not(:disabled){
      background-color: map.get($solid-color-map, hover);
      border-color: map.get($solid-color-map, hover);
    }
    &:disabled {
      background-color: map.get($solid-color-map, disabled);
      border-color: map.get($solid-color-map, disabled);
    }
  } @else if $type == 'line' {
    @include typo(var(--font-size-14), 500, map.get($line-color-map, text));
    background-color: var(--color-white);
    border: 1px solid map.get($line-color-map, default);
    &:hover:not(:disabled){
      border: 1px solid map.get($line-color-map, hover);
      color: map.get($line-color-map, hover);
      svg {
        * {
          stroke: map.get($line-color-map, hover);
        }
      }
    }
    &:disabled {
      border-color: map.get($line-color-map, disabled);
      color: map.get($line-color-map, disabled);
    }
  } @else if $type == 'full-line' {
    @include typo(var(--font-size-14), 500, map.get($line-color-map, text));
    background-color: var(--color-gray-30);
    border: 1px solid var(--color-gray-100);
    &:hover:not(:disabled){
      background-color: var(--color-primary-150);
      border: 1px solid var(--color-primary-300);
      color: var(--color-primary-700);
    }
    &:disabled {
      background-color: var(--color-gray-10);
      border-color: var(--color-gray-30);
      color: var(--color-gray-200);
    }
  } 
}

@mixin btn-size($size: 'md') {
  $size-map: map.get($button-style, $size);
  & {
    height: map.get($size-map, height);
    &:not(&.btn__icon) {
      min-width: map.get($size-map, min-width);
      padding: 0 map.get($size-map, padding);
    }
    &.btn__icon {
      width: map.get($size-map, height);
      padding: 0;
      border: 0;
    }
  }
  // 별도 스타일 추가 가능
  @if $size == 'xl' {
    & {
      font-size: var(--font-size-16);
      font-weight: 700;
    }
  }
  @if $size == 'lg' {
    & {
      font-weight: 700;
    }
  }
}
/* ========================== Styles ========================== */
.btn {
  &__full {
    @each $color in map.keys($button-solid-colors) {
      @each $size in map.keys($button-style) {
        &--#{"" + $color}-#{$size} {
          @include btn-base($type: 'full', $color: $color);
          @include btn-size($size);
          @if $color == secondary {
            & {
              border-color: var(--color-gray-150);
              &:hover:not(:disabled){
                border-color: var(--color-primary-300);
              }
              &:disabled {
                border-color: var(--color-gray-30);
                color: var(--color-gray-200);
              }
            }
          }
        }
      }
    }
  }

  &__line {
    @each $color in map.keys($button-solid-colors) {
      @each $size in map.keys($button-style) {
        &--#{"" + $color}-#{$size} {
          @include btn-base($type: 'line', $color: $color);
          @include btn-size($size);
        }
      }
    }
  }
}
